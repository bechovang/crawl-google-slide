#!/usr/bin/env python3
"""
Test script ƒë·ªÉ ki·ªÉm tra OCR.space API v·ªõi nhi·ªÅu key.
"""

import requests
import base64
from PIL import Image, ImageDraw
import os
import json
from datetime import datetime, timedelta

def load_check_history():
    """Load l·ªãch s·ª≠ check t·ª´ file check_key.txt"""
    if os.path.exists('check_key.txt'):
        try:
            with open('check_key.txt', 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_check_history(history):
    """L∆∞u l·ªãch s·ª≠ check v√†o file check_key.txt"""
    with open('check_key.txt', 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

def can_test_key(key_name, history):
    """Ki·ªÉm tra xem c√≥ th·ªÉ test key n√†y kh√¥ng d·ª±a tr√™n l·ªãch s·ª≠"""
    if key_name not in history:
        return True
    
    last_check = history[key_name]['last_check']
    last_check_time = datetime.fromisoformat(last_check)
    current_time = datetime.now()
    
    # N·∫øu ch∆∞a ƒë·ªß 1 gi·ªù k·ªÉ t·ª´ l·∫ßn check cu·ªëi
    if current_time - last_check_time < timedelta(hours=1):
        remaining_time = timedelta(hours=1) - (current_time - last_check_time)
        print(f"‚è∞ Key '{key_name}' ƒë√£ ƒë∆∞·ª£c check g·∫ßn ƒë√¢y. Ch·ªù th√™m {remaining_time}")
        return False
    
    return True

def test_ocrspace_api(api_key, key_name):
    """Test OCR.space API v·ªõi ·∫£nh ƒë∆°n gi·∫£n."""
    try:
        print(f"-> ƒêang test key: {key_name}")
        print("-> ƒêang t·∫°o ·∫£nh test...")
        
        # T·∫°o ·∫£nh test
        img = Image.new('RGB', (300, 100), color='white')
        draw = ImageDraw.Draw(img)
        draw.text((10, 10), "Hello World Test", fill='black')
        draw.text((10, 40), "OCR.space API Test", fill='black')
        
        # L∆∞u ·∫£nh test
        test_img_path = f"test_ocrspace_{key_name}.png"
        img.save(test_img_path)
        
        print("-> ƒêang g·ª≠i y√™u c·∫ßu ƒë·∫øn OCR.space API...")
        
        # ƒê·ªçc ·∫£nh v√† encode base64
        with open(test_img_path, 'rb') as image_file:
            image_data = image_file.read()
            image_base64 = base64.b64encode(image_data).decode('utf-8')
        
        # G·ª≠i y√™u c·∫ßu ƒë·∫øn OCR.space API
        url = "https://api.ocr.space/parse/image"
        payload = {
            'apikey': api_key,
            'base64Image': f'data:image/png;base64,{image_base64}',
            'language': 'eng',
            'isOverlayRequired': False,
            'filetype': 'png',
            'detectOrientation': True,
            'scale': True,
            'OCREngine': 2
        }
        
        response = requests.post(url, data=payload, timeout=30)
        result = response.json()
        
        # X√≥a file test
        os.remove(test_img_path)
        
        if result['IsErroredOnProcessing']:
            print(f"‚ùå L·ªói: {result['ErrorMessage']}")
            return False, result.get('ErrorMessage', 'Unknown error')
        
        # Tr√≠ch xu·∫•t text t·ª´ k·∫øt qu·∫£
        parsed_text = result['ParsedResults'][0]['ParsedText']
        
        print(f"‚úÖ K·∫øt qu·∫£ OCR: '{parsed_text}'")
        
        if "Hello" in parsed_text or "Test" in parsed_text:
            print("‚úÖ OCR.space API ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng!")
            return True, "Success"
        else:
            print("‚ùå OCR.space API kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c text ƒë∆°n gi·∫£n.")
            return False, "OCR failed to recognize simple text"
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False, str(e)

def format_time_ago(timestamp_str):
    """Format th·ªùi gian c√°ch ƒë√¢y"""
    try:
        check_time = datetime.fromisoformat(timestamp_str)
        now = datetime.now()
        diff = now - check_time
        
        if diff.days > 0:
            return f"{diff.days} ng√†y tr∆∞·ªõc"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} gi·ªù tr∆∞·ªõc"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} ph√∫t tr∆∞·ªõc"
        else:
            return "V·ª´a xong"
    except:
        return "Kh√¥ng x√°c ƒë·ªãnh"

def can_use_key(key_name, history):
    """Ki·ªÉm tra xem key c√≥ th·ªÉ s·ª≠ d·ª•ng kh√¥ng"""
    if key_name not in history:
        return True, "Ch∆∞a test"
    
    last_check = history[key_name]['last_check']
    last_check_time = datetime.fromisoformat(last_check)
    current_time = datetime.now()
    
    # N·∫øu ch∆∞a ƒë·ªß 1 gi·ªù k·ªÉ t·ª´ l·∫ßn check cu·ªëi
    if current_time - last_check_time < timedelta(hours=1):
        remaining_time = timedelta(hours=1) - (current_time - last_check_time)
        return False, f"Ch·ªù th√™m {remaining_time}"
    
    return True, "C√≥ th·ªÉ test"

def show_key_status():
    """Hi·ªÉn th·ªã tr·∫°ng th√°i c√°c key"""
    print("=== TR·∫†NG TH√ÅI CHECK KEY OCR.SPACE ===")
    
    history = load_check_history()
    
    if not history:
        print("üìù Ch∆∞a c√≥ l·ªãch s·ª≠ check key n√†o.")
        print("Ch·∫°y test ƒë·ªÉ test key.")
        return
    
    print(f"üìã T√¨m th·∫•y {len(history)} key trong l·ªãch s·ª≠:")
    print()
    
    working_keys = []
    failed_keys = []
    waiting_keys = []
    
    for key_name, data in history.items():
        status, message = can_use_key(key_name, history)
        last_check = format_time_ago(data['last_check'])
        
        if data['success']:
            # N·∫øu key ho·∫°t ƒë·ªông, lu√¥n hi·ªÉn th·ªã l√† HO·∫†T ƒê·ªòNG
            working_keys.append((key_name, last_check))
            if status:
                print(f"‚úÖ {key_name}: HO·∫†T ƒê·ªòNG (check {last_check})")
            else:
                print(f"‚úÖ {key_name}: HO·∫†T ƒê·ªòNG (check {last_check}) - {message}")
        else:
            failed_keys.append((key_name, last_check, data['message']))
            print(f"‚ùå {key_name}: L·ªñI - {data['message']} (check {last_check})")
    
    print(f"\n{'='*50}")
    print("üìä TH·ªêNG K√ä:")
    print(f"‚úÖ Ho·∫°t ƒë·ªông: {len(working_keys)}")
    print(f"‚ùå L·ªói: {len(failed_keys)}")
    
    if working_keys:
        print(f"\nüí° KHUY·∫æN NGH·ªä:")
        print(f"- S·ª≠ d·ª•ng {len(working_keys)} key ho·∫°t ƒë·ªông:")
        for key_name, last_check in working_keys:
            print(f"  + {key_name} (check {last_check})")
        print(f"- M·ªói key c√≥ th·ªÉ x·ª≠ l√Ω ~180 slide/gi·ªù")
        print(f"- T·ªïng c·ªông c√≥ th·ªÉ x·ª≠ l√Ω ~{len(working_keys) * 180} slide/gi·ªù")
        print(f"- L∆∞u √Ω: M·ªói key ch·ªâ c√≥ th·ªÉ test l·∫°i sau 1 gi·ªù")
    
    if failed_keys:
        print(f"\n‚ùå C√ÅC KEY L·ªñI:")
        for key_name, last_check, message in failed_keys:
            print(f"  - {key_name}: {message}")

def test_multiple_keys():
    """Test nhi·ªÅu key"""
    print("=== TEST OCR.SPACE API - MULTIPLE KEYS ===")
    print("Nh·∫≠p danh s√°ch key theo format: T√™n1;Key1|T√™n2;Key2|...")
    print("V√≠ d·ª•: Key1;abc123|Key2;def456")
    
    input_keys = input("Nh·∫≠p danh s√°ch key: ").strip()
    
    if not input_keys:
        print("‚ùå Kh√¥ng c√≥ key n√†o ƒë∆∞·ª£c nh·∫≠p!")
        return
    
    # Parse input
    keys = []
    for pair in input_keys.split('|'):
        if ';' in pair:
            name, key = pair.split(';', 1)
            keys.append((name.strip(), key.strip()))
    
    if not keys:
        print("‚ùå Format kh√¥ng ƒë√∫ng!")
        return
    
    print(f"\nüìã T√¨m th·∫•y {len(keys)} key ƒë·ªÉ test:")
    for name, key in keys:
        print(f"  - {name}: {key[:10]}...")
    
    # Load l·ªãch s·ª≠
    history = load_check_history()
    
    print("\nüîç Ki·ªÉm tra l·ªãch s·ª≠ test...")
    
    # Test t·ª´ng key
    results = []
    for key_name, api_key in keys:
        print(f"\n{'='*50}")
        print(f"Testing: {key_name}")
        
        # Ki·ªÉm tra xem c√≥ th·ªÉ test kh√¥ng
        if not can_test_key(key_name, history):
            continue
        
        # Test key
        success, message = test_ocrspace_api(api_key, key_name)
        
        # L∆∞u k·∫øt qu·∫£
        current_time = datetime.now()
        history[key_name] = {
            'last_check': current_time.isoformat(),
            'success': success,
            'message': message,
            'requests_used': 1
        }
        
        results.append({
            'name': key_name,
            'success': success,
            'message': message,
            'time': current_time.isoformat()
        })
        
        if success:
            print(f"‚úÖ {key_name}: HO·∫†T ƒê·ªòNG")
        else:
            print(f"‚ùå {key_name}: L·ªñI - {message}")
    
    # L∆∞u l·ªãch s·ª≠
    save_check_history(history)
    
    # Hi·ªÉn th·ªã t·ªïng k·∫øt
    print(f"\n{'='*50}")
    print("üìä T·ªîNG K·∫æT:")
    
    working_keys = [r for r in results if r['success']]
    failed_keys = [r for r in results if not r['success']]
    
    print(f"‚úÖ Ho·∫°t ƒë·ªông: {len(working_keys)}")
    for result in working_keys:
        print(f"  - {result['name']}")
    
    if failed_keys:
        print(f"‚ùå L·ªói: {len(failed_keys)}")
        for result in failed_keys:
            print(f"  - {result['name']}: {result['message']}")
    
    # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ gi·ªõi h·∫°n
    print(f"\nüìà TH√îNG TIN GI·ªöI H·∫†N:")
    print("- M·ªói key: 180 requests/gi·ªù")
    print("- M·ªói key: 25,000 requests/th√°ng")
    
    if working_keys:
        print(f"\nüí° KHUY·∫æN NGH·ªä:")
        print(f"- S·ª≠ d·ª•ng {len(working_keys)} key ho·∫°t ƒë·ªông")
        print(f"- M·ªói key c√≥ th·ªÉ x·ª≠ l√Ω ~180 slide/gi·ªù")
        print(f"- T·ªïng c·ªông c√≥ th·ªÉ x·ª≠ l√Ω ~{len(working_keys) * 180} slide/gi·ªù")

def main():
    print("=== OCR.SPACE API KEY MANAGER ===")
    print("1. Test nhi·ªÅu key")
    print("2. Xem tr·∫°ng th√°i key")
    print("3. Tho√°t")
    
    choice = input("\nCh·ªçn ch·ª©c nƒÉng (1-3): ").strip()
    
    if choice == "1":
        test_multiple_keys()
    elif choice == "2":
        show_key_status()
    elif choice == "3":
        print("T·∫°m bi·ªát!")
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main() 